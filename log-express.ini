#메인 설정
[configuration]
# 디버그 메시지를 출력하는 옵션입니다.
# 기본값: false
debugMode.enable=true
debugMode.console=true
debugMode.file=false

autoShutdown=true
nonBlockingQueue=true

# 로그가 쌓이게될 원형 큐의 크기를 설정합니다.
# 만약 큐가 가득 차게 된다면, 로그 기록 메서드를 호출하였을 때 큐에 비어있는 공간이 생길 때까지 대기합니다.
# 기본값: 128000
queueSize=128000

# 콘솔 로그(System.out)에 기록할 버퍼 사이즈 byte 단위로 설정합니다.
# 기본값: 1024
consoleBufferSize=1024

# 기본 marker 를 설정합니다. marker 는 tag의 개념과 같습니다.
# defaultLogger() 메서드를 호출하였을 때 해당 marker 를 갖고 있는 Logger 객체를 가져옵니다.
# 만약 지정하지 않는다면 첫 번째 writer 옵션의 이름이 기본 marker 가 됩니다.
# 기본값: 비어있음
defaultMarker=pdf

# 워커 스레드의 interval 을 설정합니다. 만약 큐가 비어있는 경우 이 옵션 값 만큼 대기(wait)를 하게 됩니다.
# 기본값: 3000ms
workerInterval=3000

# 워커 스레드에서 대기가 발생하기 전에 파일 존재 여부를 확인하고 없으면 다시 생성합니다.
# 기본값: false
fileExistCheck=true


color.console=true
color.file=true
color.levelName=true

color.level.info=green
color.level.warn=yellow
color.level.error=red
color.level.debug=blue
color.level.trace=cyan




# writer 옵션. Logger의 객체는 해당 marker의 Writer를 사용합니다. 만약 지정되지 않은 marker를 사용할 경우 기본 Writer를 사용하게됩니다.
# writer 의 섹션 이름은 항상 'writer/' 로 시작해야 합니다. 그 뒤에 오는 것은 marker 입니다. 이 예제에서 marker는 'api'입니다.
[writer/pdf]
# 같은 Writer 옵션을 공유하는  marker 를 추가할 수 있습니다. 쉼표로 구분됩니다.
markers=

# level 을 설정합니다.
# trace, debug, info, warn, error, off 순으로 레벨이 낮아집니다. off 레벨에서는 어떤 로그도 출력하지 않습니다.
# 기본값: info
level=debug

# 버퍼 크기를 byte단위로 설정합니다.
bufferSize=1024


closerBufferSize=39452672

# 파일의 최대 크기를 Mib 단위로 설정합니다.
# file옵션에 {number} 가 있어야 작동합니다.
# 기본값: 512mib
maxSize=512


# 최대 기록 날짜를 설정합니다.
# 설정한 날짜가 지난 로그 파일은 자동으로 삭제됩니다.
# file옵션에 {date::} 가 있어야 작동합니다. date format 에 따라서 오동작할 수 있으니 잘 설정하세요.
# 기본값: 60일
maxHistory=60

# 파일 경로 및 패턴을 설정합니다.
#  - {marker}: marker 이름
#  - {hostname}: 호스트이름
#  - {pid}:  프로세스 id. 사용을 권장하지 않음.
#  - {date::(date format)}: 로그 기록 날짜를 설정.
#  - {number}: maxSize 옵션에 따라서 파일 크기가 최대치에 도달하면, 새로운 번호의 파일로 생성됩니다.
file=C:/Users/ice3x/AppData/Local/Temp/project/test/pdflog/{marker}.{date:yyyy-MM-dd}.{number}.txt

# 로그 라인 패턴을 설정합니.
#  - {time::(date format)}: 로그 발생 시간
#  - {level}: 로그 레벨
#  - {hostname}: 호스트 이름
#  - {pid}: 프로세스 id
#  - {thread}: 스레드 이름
#  - {tid}: 스레드 id
#  - {marker}: marker 이름
#  - {message}: 로그 메시지
# !주의! 아래의 옵션을 추가시에 로그 속도가 약 0.3배로 떨어지며 더 많은 메모리를 사용합니다.
#  - {file}: 로그가 발생된 파일명
#  - {class}: 로그가 발생된 클래스의 full package 경로
#  - {class-name}: 로그가 발생된 클래스명 (패키지 경로 제외)
#  - {method}: 로그가 발생된 메서드명
#  - {line}: 로그가 발생된 라인번호
#  - {caller}: 로그를 호출한 클래스. LogExpress.getLogger 메서드의 인자를 통하여 정의됨.
#  - {caller-simple}: 로그를 호출한 클래스의 패키지 경로를 제외한 이름
pattern={time::HH:mm:ss.SSS} [{level}]  {marker} | {caller} | {class-name}.{method}():{line} | {message};

# 로그 기록 타입을 설정합니다.
# file, console 타입을 지정할 수 있습니다.
# 기본값: console
types=file


# encoding 을 설정합니다.
# 기본값: 비어있음. 시스템 기본 encoding 사용.
encoding=


# pattern 에 file,class,class-name,method,line 등의 옵션이 있을 때, stackTraceElement 배열의 인덱스 번호를 추가하여 가져올 수 있습니다.
# 만약 Looger 를 감싸는 facade 나 wrapper 클래스를 만들 경우, 로그 호출위치를 더 정확하게 명시할 수 있습니다.
# 기본값: 0
stackTraceDepth=2